#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var ds1820 = require('../my_modules/ds1820'); //load module ds1820
var ds1820_xbee = require('../my_modules/ds1820_xbee'); //load module ds1820_xbee
var temperature = require('../my_modules/temperature');
var archive_db = require('../my_modules/archive_db');
var later = require('later');
var exit_handlers = require("../my_modules/exit_handlers");



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port); // use the next line instead as we need socket.io
var io = require('socket.io').listen(server.listen(port));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  // Start local temperature logging
  var msecs = (60 * 0.5) * 1000; // log interval duration in milliseconds - Now is set in 30000msec = 30sec = 1/2 min
  ds1820.logLocalTemp(msecs, function(err){
    if(err){
      console.error(err);
    }
  });

  // Start Remote temperature logging
  process.nextTick(function(){ //the interval is defined by the sender XBee! When we get a value we store it!    
    ds1820_xbee.logRemoteTemp(function(err){
      if(err){
        console.error(err);
      }
    })
  })
  // Send a message to console
  console.log('Server up and running!');
}


/**
 * use sockets.io to emit current temperatures every 1min to anyone who wants it! 
 */

io.sockets.on('connection', function(socket){
    
    //send data to client
    setInterval(function(){
      var duration = 240; //the last x seconds of temperature data that we want to retrieve from the database
      temperature.get_temp_data(duration, function(err,result){
        if(err){
          console.error(err);
        };
        socket.emit('temperatures', result);
      });
    }, 60000); //we want data every 1 min
    
    socket.on('working_data', function(data){ //If a client sends working data to the server
        //console.log("Server got update on the working profile data. The current profile is: "+data.profile);
        //console.log("Current window data: id="+data.id+" on_time="+data.on+" off_time="+data.off+" sensors="+data.sensors+" temp="+data.temp);
        //console.log("Next window data: id=",data.next_id+" on_time="+data.next_on+" off_time="+data.next_off+" sensors="+data.next_sensors+" temp="+data.next_temp);
        //the server broadcasts the data back to all other clients!
        console.log('server got an update on the current data - will broadcast to all clients');
        socket.broadcast.emit('check_data', {profile:data.profile, id:data.id, on:data.on, off:data.off, sensors:data.sensors, temp:data.temp, next_id:data.next_id, next_on:data.next_on, next_off:data.next_off, next_sensors:data.next_sensors, next_temp:data.next_temp}); 
    })

});


/**
 * schedule sensor data archive every day at the time (24 hour) that is specified here
 * using later.js 
 */

// set later to use local time
later.date.localTime();
var sched=later.parse.recur().on('11:38:00').time(); 

later.setInterval(function(){
  archive_db.archive_database(function(err){
    if(err){
      console.error(err);
    }
    else
    {
      console.log('sensor data are archived successfully!');
    }
  })
}, sched)


/**
 * Exit functions 
 */

process.on('SIGINT', exit_handlers.gracefulExit).on('SIGTERM', exit_handlers.gracefulExit);


 // * The following 2 functions are not used as some errors are not of that importance to exit the app
 // * I'll decide about them while testing 

// process.on('error', function(err){
//   console.error(err);
//   gracefulExit();
// })

// process.on('uncaughtException', function(err){
//   console.error(err);
//   gracefulExit();
// })) 


// process.on('exit', function(err){
//   console.log("test"); //this will run just before exit and then it will exit! For the time being I don't need it
// })