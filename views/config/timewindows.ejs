<!DOCTYPE html>
<html>
	<head>
		<link rel="stylesheet" type="text/css" href="/select2/css/select2.css" >
		<link rel="stylesheet" type="text/css" href="/stylesheets/select2-width-fix.css">
		<link rel="stylesheet" type="text/css" href="/pickadate/themes/default.css">
		<link rel="stylesheet" type="text/css" href="/pickadate/themes/default.time.css">
		<% include ../partials/head %>
	</head>

<body>
	<header>
		<% include ../partials/header_edits %>
	</header>

	<div class="container-fluid">
		<div class="row" id="timewindows">
		<%timetables.forEach(function(window){%>
			<div class="col-xs-12 col-md-6 col-lg-3">
				<div class="panel panel-default" id='<%=window.id%>'>
				  <!-- Default panel contents -->
				  <div class="panel-heading">
				  	<span><%=window.name%></span>
				  	<%if(window.protected==0){%>
				  	<span class="pull-right glyphicon glyphicon-remove remove-timewindow" onclick="remove_timewindow('<%=window.id%>');"></span>
				  	<%}
				  	else
				  	{%>
				  	<span class="pull-right glyphicon glyphicon-bookmark" style="color:gray;"></span>
				  	<%}%>
				  </div>
				  <div class="panel-body">
				  	<div class="row">
					  	<div class="col-xs-12">
							<div class="input-group">
								<input class="form-control" type="text" value="<%=window.temp%>" name="setTargetTemp">
							</div>
						</div>
					</div>

					<div class="row" style="padding-top:15px;padding-bottom:15px;">
						<div class="col-xs-6" style="padding-right:5px;">
							<input class="timepicker form-control" name="on_time" placeholder="ON time" type="time" value="<%=window.on_time%>">
						</div>
						<div class="col-xs-6" style="padding-left:5px;">
							<input class="timepicker form-control" name="off_time" placeholder="OFF time" type="time" value="<%=window.off_time%>">
						</div>	
					</div>	

					<div class="row">
						<div class="col-xs-12">
							<select class="form-control" style="width:100%;" name="sensors" multiple="multiple">
								<optgroup label="Sensor location:">
								<% sensors.forEach(function(item){ %>
								  <option value="<%=item.id%>"
								  <%var arr = window.sensor_ids.split(',');
								  for (var i=0; i<arr.length; i++){
								  	if (item.id==arr[i]) {%> selected="selected" <%}
								  }%>><%= item.location %>
								  </option>
								 <%});%>
								 </optgroup>
							 </select>
						</div>
					</div>

				  </div>
				</div>
			</div>	
		<%})%>
		</div>
		<div class="row" id="buttons" style="padding-bottom:20px;">
			<div class="col-xs-12 col-md-12 col-lg-12">
				<div class="btn-group pull-left">
					<button id="resetbtn" type="button" class="btn btn-danger">Reset</button>
					<button id="refreshbtn" type="button" class="btn btn-danger" onclick="location.reload(true);"><span class="glyphicon glyphicon-refresh"></span></button>
				</div>
				<div class="btn-group pull-right">
					<button id="savebtn" type="button" class="btn btn-success">Save</button>
					<button id="addbtn" type="button" class="btn btn-success">Add</button>
				</div>
			</div>
		</div>
	</div>

</body>

<% include ../partials/javascript.ejs %>
<script src="/bootstrap-touchspin/jquery.bootstrap-touchspin.js"></script>
<script src="/select2/js/select2.min.js"></script>
<script src="/pickadate/compressed/picker.js"></script>
<script src="/pickadate/compressed/picker.time.js"></script>
<script src="/javascripts/custom.js"></script>

<script>
var reset_data = [];
var latest_saved_data=[];

	$( document ).ready(function() {

		$("[name='sensors']").select2({
			minimumResultsForSearch: Infinity,
			placeholder: "Select sensors"
		});

		$('.timepicker').pickatime({
			format: 'HH:i',
			formatSubmit: 'HH:i',
			interval:30
		});

		$("input[name='setTargetTemp']").TouchSpin({
		min: 0, // Minimum value.
		max: 100, // Maximum value.
		decimals: 1,
		boostat: 3, // Boost at every nth step.
		maxboostedstep: 2, // Maximum step when boosted.
		postfix: '&deg C', // Text after the input.
		// prefix: '<span class="glyphicon glyphicon-fire"></span>', // Text before the input.
		step: 0.1, // Incremental/decremental step on up/down change.
		stepinterval: 100, // Refresh rate of the spinner in milliseconds.
		stepintervaldelay: 500 // Time in milliseconds before the spinner starts to spin.
		});

		$("input[name='setTargetTemp']").change(function(){
			$("#savebtn").removeProp('disabled');
			$("#savebtn").empty();
			$("#savebtn").append('Save <span class="glyphicon glyphicon-transfer"</span>');
		})

		$('.timepicker').change(function(){
			$("#savebtn").removeProp('disabled');			
			$("#savebtn").empty();
			$("#savebtn").append('Save <span class="glyphicon glyphicon-transfer"</span>');
		})

		$("[name='sensors']").change(function(){
			$("#savebtn").removeProp('disabled');
			$("#savebtn").empty();
			$("#savebtn").append('Save <span class="glyphicon glyphicon-transfer"</span>');
		})
		
		$("#resetbtn").prop('disabled', true);
		$("#savebtn").prop('disabled', true);

		reset_data=get_form_data();
		latest_saved_data = get_form_data();

	}) //end of ( document ).ready(function()



	$('#savebtn').click(function(){
		var timeRangeError=false;
		var emptyError=false;
		var arr=get_form_data();
		for (var i = arr.length - 1; i >= 0; i--) {
			for(var key in arr[i]){
				if (arr[i][key]==null){
					emptyError = true;
				}
			}
			if (arr[i].on>arr[i].off){
				timeRangeError = true
			}
		}
		
		if (timeRangeError){
			console.log("The ON time cannot be later than the OFF time! The only \"exception\" is 24:00 which is interpreted as 00:00.\nIf you want to set a time range from before 00:00 until after 00:00 you should break it in two timewindows. One until 00:00 and one from 00:00 until...");
		}
		
		if(emptyError)
		{
			console.log("All fields are required.");
		}
		
		if(!emptyError && !timeRangeError)
		{
			// console.log(arr);
			var cur_data=get_form_data();
			if(!compare_arrays_of_obj(cur_data, latest_saved_data)){
				update_timewindows(arr, "set");
			}
			else
			{
				console.log("No need to save. There are no changes.")
				$("#savebtn").empty();
				$("#savebtn").append('Save');
				$("#savebtn").prop('disabled', true);
			}
		}
	})


	function update_timewindows(arr, action){
		$.ajax({
				type: "POST",
				contentType: "application/json; charset=utf-8", //contentType is the type of data you're sending
				url: '/config/update_timewindows',
				data: JSON.stringify({data:arr}),
				/*JavaScript Object Notation is a way to share data between applications in object format.
				However, you cannot send an object over an HTTP request without first turning it into a string
				and sending it as a single variable. The functions JSON.parse() and JSON.stringify() do this for us.*/
				success: function(rdata) { //rdata = remote data that the server sends as feedback...
					// console.log(rdata.result);
					if (rdata.result==="ok"){
						console.log("success");
						if(action=="set")
						{
							// reset_data=get_form_data();
							$("#savebtn").empty();
							$("#savebtn").append('Save <span class="glyphicon glyphicon-ok"</span>');
							$("#savebtn").prop('disabled', true);
							$("#resetbtn").removeProp('disabled');
							latest_saved_data = arr;
						}
						else if(action=="reset"){
							location.reload(true); 
						}
					}
					// else
					// {
					// 	console.log('error');
					// 	$("#savebtn").empty();
					// 	$("#savebtn").append('Error <span class="glyphicon glyphicon-alert"</span>');
					// }
				},
				dataType: "json" // dataType is what you're expecting back from the server: json, html, text,
		});
	}


	function remove_timewindow(id){
		console.log("removing the timewindow: "+id);
		$("#savebtn").empty();
		$("#savebtn").append('Save <span class="glyphicon glyphicon-transfer"</span>');
		$("#"+id).parent().remove();
		var cur_data=get_form_data();
		if(!compare_arrays_of_obj(cur_data, latest_saved_data)){
			$("#savebtn").removeProp('disabled');
			$("#savebtn").empty();
			$("#savebtn").append('Save <span class="glyphicon glyphicon-transfer"</span>');
		}
		else
		{
			$("#savebtn").empty();
			$("#savebtn").append('Save');
			$("#savebtn").prop('disabled', true);
		}
	}


	$('#addbtn').click(function(){
		$.ajax({
			type: "POST",
			contentType: "application/json; charset=utf-8", 
			url: "/config/add_timewindow",
			success: function(rdata) { //rdata = remote data that the server sends as feedback...
				// console.log(rdata.result);
				if (rdata.result==="ok"){
					var newCounter=setCustomNum();
					console.log("success");
					var sensors = rdata.sensors;
					var html = "<div class='col-xs-12 col-md-6 col-lg-3'>"+
								"<div class='panel panel-default newtm' id='new"+newCounter+"'>"+
								  "<div class='panel-heading'>"+
								  	"<span>CUSTOM"+newCounter+"</span>"+
								  	"<span class='pull-right glyphicon glyphicon-remove remove-timewindow' onclick=\"remove_timewindow('new"+newCounter+"');\"></span>"+
								  "</div>"+
								  "<div class='panel-body'>"+
								  	"<div class='row'>"+
									  	"<div class='col-xs-12'>"+
											"<div class='input-group'>"+
												"<input class='form-control' type='text' value='25' name='setTargetTemp'>"+
											"</div>"+
										"</div>"+
									"</div>"+
									"<div class='row' style='padding-top:15px;padding-bottom:15px;'>"+
										"<div class='col-xs-6' style='padding-right:5px;'>"+
											"<input class='timepicker form-control' name='on_time' placeholder='ON time' type='time' value=''>"+
										"</div>"+
										"<div class='col-xs-6' style='padding-left:5px;'>"+
											"<input class='timepicker form-control' name='off_time' placeholder='OFF time' type='time' value=''>"+
										"</div>"+
									"</div>"+
									"<div class='row'>"+
										"<div class='col-xs-12'>"+
											"<select class='form-control' style='width:100%;' name='sensors' multiple='multiple'>"+
												"<optgroup label='Sensor location:'>";
												sensors.forEach(function(i){
													html = html + "<option value=" + i.id +">"+i.location+"</option>";
												});
												html = html + "</optgroup>"+
											 "</select>"+
										"</div>"+
									"</div>"+
								  "</div>"+
								"</div>"+
							"</div>";
					}
					$('#timewindows').append(html);
					var TempTarget = $('.newtm').children('.panel-body').children().find("input[name='setTargetTemp']");
					TempTarget.TouchSpin({
						min: 0, // Minimum value.
						max: 100, // Maximum value.
						decimals: 1,
						boostat: 3, // Boost at every nth step.
						maxboostedstep: 2, // Maximum step when boosted.
						postfix: '&deg C', // Text after the input.
						// prefix: '<span class="glyphicon glyphicon-fire"></span>', // Text before the input.
						step: 0.1, // Incremental/decremental step on up/down change.
						stepinterval: 100, // Refresh rate of the spinner in milliseconds.
						stepintervaldelay: 500 // Time in milliseconds before the spinner starts to spin.
						});

					var TimeTarget = $('.newtm').children('.panel-body').children().find(".timepicker");
					TimeTarget.pickatime({
						format: 'HH:i',
						formatSubmit: 'HH:i',
						interval:30
					});

					var SensorTarget = $('.newtm').children('.panel-body').children().find("[name='sensors']");
					SensorTarget.select2({
						minimumResultsForSearch: Infinity,
						placeholder: "Select sensors"
					});
					$("#savebtn").removeProp('disabled');
					$("#savebtn").empty();
					$("#savebtn").append('Save <span class="glyphicon glyphicon-transfer"</span>');

					//the following .change functions seem to be needed again for the new timewindow...
					$("input[name='setTargetTemp']").change(function(){
						$("#savebtn").removeProp('disabled');
						$("#savebtn").empty();
						$("#savebtn").append('Save <span class="glyphicon glyphicon-transfer"</span>');
					})

					$('.timepicker').change(function(){
						$("#savebtn").removeProp('disabled');			
						$("#savebtn").empty();
						$("#savebtn").append('Save <span class="glyphicon glyphicon-transfer"</span>');
					})

					$("[name='sensors']").change(function(){
						$("#savebtn").removeProp('disabled');
						$("#savebtn").empty();
						$("#savebtn").append('Save <span class="glyphicon glyphicon-transfer"</span>');
					})


			},
			dataType: "json" // dataType is what you're expecting back from the server: json, html, text,
		});
	})

	$("#resetbtn").click(function(){
		var cur_data=get_form_data();
		if(!compare_arrays_of_obj(cur_data, reset_data) || !compare_arrays_of_obj(cur_data, latest_saved_data)){
			update_timewindows(reset_data, "reset");
		}
		else
		{
			console.log("There is no change in the time windows!");
			$("#savebtn").empty();
			$("#savebtn").append('Save');
			$("#resetbtn").prop('disabled', true);
		}
	})


	

	function setCustomNum(){
		var customNums=new Array();	
		$('.panel-heading > span').each(function(){
			label = $(this).text();
			if(label!=""){
				var re = new RegExp("CUSTOM([0-9]+)");
				var custom = re.exec($(this).text());
				if(custom!=null){customNums.push(custom[1]);}
			}
		})
		if(customNums!=null){
			customNums.sort(function(a, b){return a-b});	
			// console.log(customNums);
			var missing=false;
			for (var i = 0; i <= customNums.length - 1; i++) {	
				if(customNums[i]!=i+1){
						missing=true;
						return i+1;
				}
			}
			if (!missing){return customNums.length+1;}
		}
		else {return 1;}
	}
	
	function get_form_data(){
		var arr=[];
		$('.panel.panel-default').each(function(){
			var tw = new Object();
			tw.name=$(this).children('.panel-heading').find('span').text();
			tw.id = $(this).attr('id');
			tw.temp = $(this).find('[name="setTargetTemp"]').val()*10/10
			tw.on = $(this).find('[name="on_time"]').val();
			tw.off = $(this).find('[name="off_time"]').val();
			if(tw.off=='00:00'){tw.off='24:00'};
			var sensor_ids = $(this).find('[name="sensors"]').val();
			if (sensor_ids!=null){
				tw.sensors = sensor_ids.join(',');	
			}
			else
			{
				tw.sensors=null;
			}
			arr.push(tw);
		});
		
		return arr;
	}


</script>

<script type="text/javascript">
	function backButton() {
	    var value = readCookie('backUrl_edit');
	    eraseCookie('backUrl_edit');
	    document.location.href = value;
	}
</script>