<!DOCTYPE html>
<html>
	<head>
		<link rel="stylesheet" type="text/css" href="/stylesheets/select2.css">
		<link rel="stylesheet" type="text/css" href="/stylesheets/select2-frontpage-fix.css">
		<% include ./partials/head %>
	</head>
<style type="text/css">
	.offline {
		text-decoration: line-through;
	}
</style>

<body>
	<header>
		<% include ./partials/header %>
	</header>

	<div id="myModal" class="modal fade">
	  <div class="modal-dialog">
	    <div class="modal-content">
	      <div class="modal-header">
	        <h4 class="modal-title">Change profile</h4>
	      </div>
	      <div class="modal-body">
	        <p>Are you sure you want to change the working profile?</p>
	      </div>
	      <div class="modal-footer">
	        <button name="cancelbtn" type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
	        <button name="okbtn" type="button" class="btn btn-primary">Yes</button>
	      </div>
	    </div><!-- /.modal-content -->
	  </div><!-- /.modal-dialog -->
	</div><!-- /.modal -->


	<div id="errModal" class="modal fade">
	  <div class="modal-dialog">
	    <div class="modal-content">
	      <div class="modal-header">
	        <h4 class="modal-title">Overlap Error</h4>
	      </div>
	      <div class="modal-body">
	        <p>There is an overlap in time windows for the current time. Please edit the profile to fix it.<br/>
	        Until then the status is set to <strong>Paused</strong>.</p>
	      </div>
	      <div class="modal-footer">
	        <button name="okerr" type="button" class="btn btn-primary">OK</button>
	      </div>
	    </div><!-- /.modal-content -->
	  </div><!-- /.modal-dialog -->
	</div><!-- /.modal -->



	<div class="container-fluid">
		<div class="row"> 
			<div class="col-xs-12 col-sm-6 col-md-6"> <!-- Main panel visible allways-->
				<div class="row">
					<div class="col-xs-10">
						<form id="mainform" method="post" action="/therm">
							<select id="profiles" style="width: 100%" class="form-control" name="selected_profile">
							<% profiles.forEach(function(item){ %>
							  <option value="<%=item.id%>"
							  <%if (item.status==1){ %> selected="selected" <% } %>>
							  	<%= item.name %>
							  </option>
							 <%});%>
							</select>
						</form>
					</div>
					<div class="col-xs-2">
						<button type="button" class="btn btn-front pull-right" onclick="editProfile()">
							<span class="glyphicon glyphicon-edit" aria-hidden="true"></span>
						</button>
					</div>
				</div>


				<div class="row" style="margin-bottom:10px;">
		    		<div id="temp" class="col-xs-8" style="color:#F6F4EC;">
		    			<!-- <h5><strong>Cur. Temp</strong></h5> -->
		    			<h1>
		    				<span>
								... 
		    				</span>&deg;C
		    			</h1>
		    		</div>
		    		<div id="status" class="col-xs-4 text-right" style="color:#F6F4EC;">
		    			<h4 style="margin-top:30px;"><span class="label label-default">...</span></h4>
		    			<!-- status can be either: Working / Paused / Overlap-->
		    		</div>
				</div>
				<div class="row">
					<div class="hidden-xs" style="margin-top:50px;">
						<!-- vertical whitespace when not in extra small screens!-->
					</div>
				</div>
				<div class="row" style="color:white;margin-top:-10px;">
					<div class="col-xs-12">
						<p>Target Temp: <strong><% if (state.err==="") {%><%=time_window_data[0].temp%><% } else {%> - <%}%> &deg C </strong>

						</p>
						<p>Sensors:
							<span id="sensorslist" class="label-group">
							<% sensor_location.forEach(function(i){%>
								<span id="sensor<%=i.id%>"class="label label-default">
									<%=i.location;%>
								</span>					
							<%})%>
							</span>
						</p>
						<%if (typeof time_window_data[0]!=="undefined" && Object.keys(time_window_next).length!==0){%>
						<p id="info" style="color:lightblue;font-size:small;">
							<span class="glyphicon glyphicon-bell" ></span>
							 <%if (time_window_next.on_time === time_window_data[0].off_time) {%> 
							 At <%=time_window_next.on_time%> target temp is scheduled to <%=time_window_next.temp%>&degC
							<%} else if(time_window_data[0].off_time<time_window_next.on_time){%>
							 There is no schedule between <%=time_window_data[0].off_time%> to <%=time_window_next.on_time%>
							 <%} else if (time_window_data[0].off_time!=='24:00'){%>
							There is no schedule after <%=time_window_data[0].off_time%>
							<%} else {%>
							The schedule will be updated at 24:00
							<%}%>
						</p>
						<%}else if (typeof time_window_data[0]!=="undefined" && Object.keys(time_window_next).length===0){%>
						<p id="info" style="color:lightblue;font-size:small;">
							<span class="glyphicon glyphicon-bell" ></span>
							<%if (time_window_data[0].off_time!=='24:00'){%>
							 There is no schedule after <%=time_window_data[0].off_time%>
							 <%} else {%>
							 The schedule will be updated at 24:00
							 <%}%> 
						</p>						
						<%}else if (typeof time_window_data[0]==="undefined" && Object.keys(time_window_next).length===0){%>
						<p id="info" style="color:lightblue;font-size:small;">
							<span class="glyphicon glyphicon-bell" ></span>
							 There is no schedule for today!
						</p>	
						<%} else if (typeof time_window_data[0]==="undefined" && Object.keys(time_window_next).length!==0){%>
						<p id="info" style="color:lightblue;font-size:small;">
							<span class="glyphicon glyphicon-bell" ></span>
							<%if (time_window_next.on_time>curtime){%>
							 At <%=time_window_next.on_time%> target temp is scheduled to <%=time_window_next.temp%>&degC							 
							<%} else {%>
							There is no schedule from now on for today!
							<%}%>
						</p>	
						<%}%>																	
					</div>
				</div>
			</div>
			<div class="hidden-xs col-sm-6 col-md-6">
				<div class="row">
					<div class="col-xs-12" style="min-height: 250px">
						<canvas id="MyChart"></canvas>
					</div>
				</div>

					<div class="row">
						<div class="col-xs-5">
							<select id="graph_duration" name="graph_duration" class="form-control" style="width:100%">
								<option value="1" selected="selected">Live</option>
								<option value="12">Last 12 hours</option>
								<option value="24">Last day (24h)</option>
								<option value="168">Last week</option>
								<option value="672">Last month</option>
							</select>
						</div>
						<div class="col-xs-5">
							<select disabled id="graph_sensor" name="graph_sensor" class="form-control" style="width:100%"> 
							<% sensor_location.forEach(function(i){%>
								<option value="<%=i.id%>"><%=i.location%></option>					
							<%})%>
							<%if(sensors.length>1){%>
									<option value="<%=sensors%>" selected="selected">All locations (average)</option>
							<%}%>
							</select>
						</div>
						<div class="col-xs-2">
							<button id="graph_refresh" type="button" class="pull-right btn btn-front"><span class="glyphicon glyphicon-refresh"></span></button>
						</div>
					</div>

			</div>
		</div> <!-- end of first row -->
	</div>
</body>

<% include ./partials/javascript.ejs %>
<script src="/socket.io/socket.io.js"></script>
<script src="/javascripts/Chart.js"></script>
<script src="/javascripts/select2/select2.min.js"></script>

<script>
	var prevstate = "";
	var curstate = ""; // so we know when the state changes and call the setRelay function
	var curdate = new Date();
	var curday = curdate.getDay();

	$( document ).ready(function(){
		var socket = io.connect();	
		var selected_profile=$('#profiles').val();
		if (selected_profile==2){
			$('#info').html('<p id="info" style="color:lightblue;font-size:small;">'+
							'<span class="glyphicon glyphicon-bell" ></span>'+
							' At <%=time_window_next.on_time%> target temp is scheduled to <%=time_window_next.temp%>&degC');
		}
		else if(selected_profile==1){
			$('#info').html('<p id="info" style="color:lightblue;font-size:small;">'+
							'<span class="glyphicon glyphicon-calendar" ></span>'+
							' To setup a schedule choose another profile');
		}
		
		//send all the working profile data to server to inform the other connected clients!
		data_info={profile:selected_profile, 
			id:'<%if (typeof time_window_data[0]!=="undefined"){%><%=time_window_data[0].id%><%};%>',
			on:'<%if (typeof time_window_data[0]!=="undefined"){%><%=time_window_data[0].on_time%><%};%>', 
			off:'<%if (typeof time_window_data[0]!=="undefined"){%><%=time_window_data[0].off_time%><%};%>', 
			sensors:'<%if (typeof time_window_data[0]!=="undefined"){%><%=time_window_data[0].sensor_ids%><%};%>',
			temp: '<%if (typeof time_window_data[0]!=="undefined"){%><%=time_window_data[0].temp%><%};%>',
			next_id:'<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.id%>', 
			next_on:'<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.on_time%>', 
			next_off:'<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.off_time%>', 
			next_sensors:'<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.sensor_ids%>',
			next_temp:'<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.temp%>'};
		// console.log(data_info);
		socket.emit('working_data', data_info); 
		

	//Get the initial data and get started...
		<% 
		var allfound=0;
		var sumtemp=0;
		for (var i = sensors.length - 1; i >= 0; i--){
			var sensor_found=0;
			for (var j = tempdata.length - 1; j >= 0; j--) {
				if(sensors[i] == tempdata[j].id){
					allfound=allfound+1;
					sensor_found=1;
					sumtemp = sumtemp + tempdata[j].average;
				}
			}
			if(sensor_found===0)
			{%>
				$('#sensor'+<%=sensors[i]%>).addClass('offline');
			<%}
			else
			{%>
				$('#sensor'+<%=sensors[i]%>).removeClass('offline');
			<%}			 
		}


		if(sumtemp!=0){
			var avgtemp = Math.round(sumtemp / allfound * 10)/10;
		}

		if(allfound==0){var noData=true;} else {var noData=false;}
		%>
		
		if(<%=noData%>){ //true if no therm data comes for the selected sensors...
			curstate = "Paused";
			console.log(curstate);
			console.log("No therm data from any off the sensors!!! Either Offline, or disabled!");
			$("#status>h4>span").removeClass("label-default");
			$("#status>h4>span").addClass("label-info");
			$("#status>h4>span").text("Paused");
			setRelay();
			$('#temp>h1>span').text("... "); //this is the first attempt... If the sensors are all remote, we might get data in a while...
		}
		else
		{
			manage(<%=avgtemp%>);
			$('#temp>h1>span').text(<%=avgtemp%>);
		}




		socket.on('temperatures', function(data){
			console.log(data);
			var allfound=0;
			var sumtemp=0;
			var sensors = "<%=sensors%>".split(',');
			for (var i = sensors.length - 1; i >= 0; i--) {
				var sensor_found=0;
				for (var j = data.length - 1; j >= 0; j--) {
					if(sensors[i]==data[j].id){
						allfound=allfound+1;
						sensor_found=1;
						sumtemp = sumtemp + data[j].average; 						
					}
				}
				if(sensor_found===0)
				{
					$('#sensor'+sensors[i]).addClass('offline');
				}
				else
				{
					$('#sensor'+sensors[i]).removeClass('offline');
				}
			}

			// if(allfound==sensors.length){
			// 	$('#sensorslist').children().removeClass('offline');
			// };				
			
			if(sumtemp!=0){
				var avgtemp = Math.round(sumtemp/allfound*10)/10;
			}

			if(allfound==0){ //true if no therm data comes for the selected sensors...
				curstate = "Paused";
				console.log(curstate);
				console.log("No therm data from any off the sensors!!! Either Offline, or disabled!");
				$("#status>h4>span").removeClass("label-default");
				$("#status>h4>span").addClass("label-info");
				$("#status>h4>span").text("Paused");
				setRelay();
				$('#temp>h1>span').text("... "); //If the sensors are all remote, we will get data when / if they become available... Maybe we should inform the user about what is happening...
			}
			else
			{
				manage(avgtemp);
				$('#temp>h1>span').text(avgtemp);
	
				//update live graph with new data if <Live graph> is selected.
				var duration=$('#graph_duration').val();
				if (duration=='1'){ //Live graph
					update_live_graph(avgtemp);
				}

			}

		});


		socket.on('check_data', function(data){ //when the server sends the current profile data, compare it with the ones used and if any of them is different reload to get the updated data from the server. The change in any of the data would have been done from another client! 
			// console.log(data);
			var selected_profile=$('#profiles').val();
			if ((selected_profile!=data.profile) || 
				("<%if (typeof time_window_data[0]!=='undefined'){%><%=time_window_data[0].id%><%};%>" != data.id) ||
				("<%if (typeof time_window_data[0]!=='undefined'){%><%=time_window_data[0].on_time%><%};%>" != data.on) ||
				("<%if (typeof time_window_data[0]!=='undefined'){%><%=time_window_data[0].off_time%><%};%>" != data.off) ||
				("<%if (typeof time_window_data[0]!=='undefined'){%><%=time_window_data[0].sensor_ids%><%};%>" !== data.sensors) ||
				("<%if (typeof time_window_data[0]!=='undefined'){%><%=time_window_data[0].temp%><%};%>"!=data.temp) ||
				("<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.id%>" != data.next_id) ||
				("<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.on_time%>" != data.next_on) ||
				("<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.off_time%>" != data.next_off) ||
				("<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.sensor_ids%>" != data.next_sensors) ||
				("<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.temp%>" != data.next_temp)){
					setTimeout(function() { location.href = location.href; },2000); //use 2 seconds delay to give time to the server to respond...
			}
		});

		socket.on('disconnect', function(){
			console.log('SOCKET DISCONNECTED!'); //the server is propably down
			//I could trigger a 404error page with location reload but that would be a problem when
			//forever is running and will get the server up again...
		})


		var selected_profile;
		$('#profiles').on('focus', function(){
			selected_profile = this.value;
		}).change(function(){
			$('#myModal').modal('show');
		});

		$("[name='okbtn']").click(function(){
			console.log("user confirms to change profile");
			$('#myModal').modal('hide');
			$('form#mainform').submit();
		});

		$("[name='okerr']").click(function(){
			$('#errModal').modal('hide');
		});

		$("[name='cancelbtn']").click(function(){
			$('#profiles').val(selected_profile);
			console.log("the profile change has been canceled");
		});


		if (<%=(state.err==="Overlap")%>) //true if there is an overlap
		{
			$("#status>h4>span").removeClass("label-default");
			$("#status>h4>span").addClass("label-danger");
			$("#status>h4>span").text("Overlap");
			// $("#status>h4>span").css({"color":"#BB3D3D", "font-size":"100%"});
			$('#errModal').modal('show');
			curstate = "Paused";
			setRelay();
		}
		else if (<%=(state.err==="No_time_window")%>) //true if not in a time window
		{
			$("#status>h4>span").removeClass("label-default");
			$("#status>h4>span").addClass("label-info");
			$("#status>h4>span").text("Paused");
			// $("#status>h4>span").css({"color":"#666666", "font-size":"100%"});
			curstate = "Paused";
			setRelay();
		}
		else if (<%=tempdata==={}%>) //no error -we are in a time window... but no initial temp data - this should not happen...
		{
			// $("#status>h4>span").css({"color":"#F6F4EC", "font-size":"80%"});
			$("#status>h4>span").removeClass("label-default");
			$("#status>h4>span").addClass("label-info");
			$("#status>h4>span").text("Waiting data...");
			curstate = "";
		}

		$('#profiles').select2({
			minimumResultsForSearch: Infinity
		});

		$('[name="graph_duration"]').select2({
			minimumResultsForSearch: Infinity
		});
		$('[name="graph_sensor"]').select2({
			minimumResultsForSearch: Infinity
		});


	}); //end of $(document).ready

	function editProfile(){
		var curprofile;
		curprofile = $('#profiles').val();
		// console.log(curprofile);
		window.location.href = "/edit/"+curprofile;
	}

	// function changeBackground(curstate){
		// if (curstate=="Working"){			
		// 	$('html').css("background-image", "url(../images/flames_2.jpg)");
		// }
		// else if (curstate=="Paused")
		// {
		// 	$('html').css("background-image", "url(../images/blue_flames_2.jpg)");
		// }
		
	// } 
	
	function getCurTime(){
		var d = new Date();
		var n = d.getDay();
		var h = d.getHours();
		var m = d.getMinutes();
		if (h<10) h="0"+h;
		if (m<10) m="0"+m;
		var curtime = h+":"+m;
		return {time:curtime, day:n};
	}

	function setRelay(){
		if (curstate != prevstate){
			//changeBackground(curstate);
			$.ajax({
				type: "POST",
				contentType: "application/json; charset=utf-8", //contentType is the type of data you're sending
				url: "/relay/actions",
				data: JSON.stringify({status:curstate}),
				/*JavaScript Object Notation is a way to share data between applications in object format.
				However, you cannot send an object over an HTTP request without first turning it into a string
				and sending it as a single variable. The functions JSON.parse() and JSON.stringify() do this for us.*/
				success: function(rdata) { //rdata = remote data that the server sends as feedback...
					console.log(rdata.result);
					if (rdata.result==="ok"){
						prevstate = curstate;
					}
				},
				dataType: "json" // dataType is what you're expecting back from the server: json, html, text,
			});
		}

	}

	function manage(curTemp){
		var cur = getCurTime();
		if (<%=(state.err==="")%>) //true if there is no error so we are in a time window...
		{
			if (cur.time >= '<%if (typeof time_window_data[0]!=="undefined"){%><%=time_window_data[0].on_time%><%};%>' && cur.time < '<%if (typeof time_window_data[0]!=="undefined"){%><%=time_window_data[0].off_time%><%};%>') {
				if (curTemp < '<%if (typeof time_window_data[0]!=="undefined"){%><%=time_window_data[0].temp%><%};%>'){
					//the status is: working
					$("#status>h4>span").removeClass("label-info label-danger label-default");
					$("#status>h4>span").addClass("label-success");
					$("#status>h4>span").text("Working");
					// $("#status>h4>span").css({"color":"#F6F4EC", "font-size":"100%"});
					curstate = "Working";
					console.log(curstate);
					setRelay();
				}
				else {
					//the status is: paused
					$("#status>h4>span").removeClass("label-success label-danger label-default");
					$("#status>h4>span").addClass("label-info");
					$("#status>h4>span").text("Paused");
					// $("#status>h4>span").css({"color":"#666666", "font-size":"100%"});
					curstate = "Paused";
					console.log(curstate);
					setRelay();
				}
			}
			else {
				//we just went off the time window so we refresh to get new data
				//console.log('refresh');
				location.reload(true);
			}
		}
		else if (<%=(state.err==="No_time_window")%>) //true if we are not in a time window...
		{
			console.log("Not in a time window...");
			if (<%=(Object.keys(time_window_next).length!==0)%>) //true if there is a following time window...
			{
				console.log("There is a following time window. Waiting...");
				//when we get in this following time window we refresh to update our data...
				if (cur.time >= '<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.on_time%>' && cur.time < '<%if (Object.keys(time_window_next).length!==0)%><%=time_window_next.off_time%>') {
				location.reload(true);
				//console.log('refresh on new time window!!!');
				}
				console.log("Or maybe the next day comes first!");
				// console.log(cur.day, curday);
				if (cur.day > curday)
				{
					//console.log("refresh on new day!!!");
					location.reload(true);
				}
			}
			else //there is not a time window neither a following one so we refresh for new data on the next day!!!
			{
				console.log("There isn't a time window following. Will refresh on next day! Waiting...");
				if (cur.day > curday)
				{
					//console.log("refresh on new day!!!");
					location.reload(true);
				}
			}
		}
		else //there is an Overlap!!!
		{
			console.log("Do nothing - wait for the user to fix the overlap!!!");
		}
	}

</script>

<script>
	
	//Some calculations about the y-axis scale I should use:

	temp_range = Math.max(<%=graph_data.temps%>)-Math.min(<%=graph_data.temps%>);
	if (temp_range<=3){
		//the scale should start at least 1 deg lower from the min temp and stop 1 deg upper the max temp while the scale divisions are per half a degree:
		var scaleWidth = 0.5;
		var scaleStart = Math.min(<%=graph_data.temps%>)-1;
		var scaleStep = temp_range*2+4; 
		//I want it to step the scale as many degrees is the range of the temperatures and 2 more steps (1 because I start from min-1 and 1 because I want to end to max+1). The *2 in the range and the +4 instaed of +2 are set because the scalestep is multiplied by the scaleWidth which I set to 0.5!
	}
	else // if (temp_range>3)...
	{
		//the scale should start at least 2 degs lower from the min temp and stop 2 degs upper the max temp while the scale divisions are per degree:
		var scaleWidth = 1;
		var scaleStart = Math.min(<%=graph_data.temps%>)-2
		var scaleStep = temp_range+4; 
		//I want it to step the scale as many degrees is the range of the temperatures and 4 more steps (2 because I start from min-2 and 2 because I want to end to max+2).
	} 

	//maybe when there are large temperature differences (> 10 degs) I should add another calculation but for now it is good enough...


	var ctx = $("#MyChart").get(0).getContext("2d");

	var myLineChart = new Chart(ctx);
	var chart = myLineChart.Line({
	    labels: "<%=graph_data.labels%>".split(','),
	    datasets: [
	        {
	            label: "Average temperature",
	            fillColor: "rgba(220,220,220,0.2)",
	            strokeColor: "rgba(220,220,220,1)",
	            pointColor: "rgba(220,220,220,1)",
	            pointStrokeColor: "#fff",
	            data: "<%=graph_data.temps%>".split(',')
	        }
	    ]
	},
	{	
		maintainAspectRatio: false,
		responsive: true,
		scaleShowGridLines : false,
		pointDotRadius : 3,
		pointHitDetectionRadius : 5,
		scaleOverride : true,
        scaleSteps : scaleStep,
        scaleStepWidth : scaleWidth,
        scaleStartValue : scaleStart
	});


	//Update graph selections
	$('#graph_sensor').change(function(){update_graph()});
	$('#graph_duration').change(function(){
		if($(this).val()!=1){ //if not LIVE the user can choose the sensor
			$('#graph_sensor').select2('enable', true);		
		}
		else //if LIVE the sensor defaults to the one used!
		{
			$('#graph_sensor').val("<%=sensors%>").trigger('change.select2');
			$('#graph_sensor').select2('enable', false);
		}
		update_graph();	
	});
	$('#graph_refresh').click(function(){update_graph()});


	function update_graph(){
		var duration=$('#graph_duration').val();
		var sensor=$('#graph_sensor').val();
		$.ajax({
				type: "POST",
				contentType: "application/json; charset=utf-8", //contentType is the type of data you're sending
				url: "/therm/update_graph",
				data: JSON.stringify({sensor:sensor,duration:duration}),
				success: function(rdata) { 
					console.log(rdata.result);
					if (rdata.result==="ok"){
						var data = rdata.graph_data;
						// console.log(Math.max.apply(null,data.temps));
						// console.log(Math.min.apply(null,data.temps));
						var newtemp_range = Math.max.apply(null,data.temps)-Math.min.apply(null,data.temps);
						if (newtemp_range<=3){
							var newscaleWidth = 0.5;
							var newscaleStart = Math.min.apply(null,data.temps)-1;
							var newscaleStep = Math.round((newtemp_range)*2+4);
						}
						else // if (newtemp_range>3)...
						{
							var newscaleWidth = 1;
							var newscaleStart = Math.min.apply(null,data.temps)-2
							var newscaleStep = Math.round(newtemp_range+4); 
						} 
						// console.log({newscaleStart:newscaleStart, newscaleWidth:newscaleWidth, newscaleStep:newscaleStep});
						chart.destroy();
						myLineChart = new Chart(ctx);
						chart = myLineChart.Line({ //the first object is data
							    labels: data.labels,
							    datasets: [
							        {
							            label: "Average temperature",
							            fillColor: "rgba(220,220,220,0.2)",
							            strokeColor: "rgba(220,220,220,1)",
							            pointColor: "rgba(220,220,220,1)",
							            pointStrokeColor: "#fff",
							            data: data.temps
							        }
							    ]
							},
							{
								maintainAspectRatio: false,
								responsive: true,
								scaleShowGridLines : false,
								pointDotRadius : 3,
								pointHitDetectionRadius : 5,
								scaleOverride : true,
						        scaleSteps : newscaleStep,
						        scaleStepWidth : newscaleWidth,
						        scaleStartValue : newscaleStart
							});						
					}
				},
				dataType: "json" // dataType is what you're expecting back from the server: json, html, text,
			});
	}


	function update_live_graph(temp){

		var min_y=chart.options.scaleStartValue;
		var max_y=chart.options.scaleStartValue+chart.options.scaleSteps*chart.options.scaleStepWidth;
		// console.log("min y="+min_y);
		// console.log("max y="+max_y);
		if (temp<=min_y || temp>=max_y){
			console.log("live data are out of the y axis range so we trigger a graph update!");
			update_graph();
		}
		else
		{
			var label=getCurTime().time;
			//remove datapoints only if there are more than 24 of them esle just add
			if (chart.datasets[0].points.length>24){ 
				chart.removeData();
			}
			chart.addData([temp], label);			
		}
	}


</script>
